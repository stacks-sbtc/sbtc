// This file is @generated by prost-build.
/// DkgShares represents the distributed key generation shares for sBTC signers
/// Maps to the sbtc_signer.dkg_shares table in PostgreSQL
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DkgShares {
    /// Primary key: The aggregate public key produced through DKG
    #[prost(message, optional, tag = "1")]
    pub aggregate_key: ::core::option::Option<
        super::super::super::super::crypto::PublicKey,
    >,
    /// The tweaked aggregate key used for Bitcoin script creation
    #[prost(message, optional, tag = "2")]
    pub tweaked_aggregate_key: ::core::option::Option<
        super::super::super::super::crypto::PublicKey,
    >,
    /// Encrypted private shares of the aggregate key
    #[prost(bytes = "vec", tag = "3")]
    pub encrypted_private_shares: ::prost::alloc::vec::Vec<u8>,
    /// Public shares used for verification
    #[prost(bytes = "vec", tag = "4")]
    pub public_shares: ::prost::alloc::vec::Vec<u8>,
    /// The Bitcoin script_pubkey derived from the tweaked aggregate key
    #[prost(bytes = "vec", tag = "5")]
    pub script_pubkey: ::prost::alloc::vec::Vec<u8>,
    /// Public keys of all signers participating in this key set
    #[prost(message, repeated, tag = "6")]
    pub signer_set_public_keys: ::prost::alloc::vec::Vec<
        super::super::super::super::crypto::PublicKey,
    >,
    /// Threshold required for valid signature reconstruction (M-of-N)
    #[prost(uint32, tag = "7")]
    pub signature_share_threshold: u32,
    /// Verification status of the DKG shares.
    /// Corresponds to the 'dkg_shares_status' column.
    #[prost(enumeration = "DkgSharesStatus", tag = "8")]
    pub dkg_shares_status: i32,
    /// The hash of the Bitcoin block that initiated this DKG round.
    /// Corresponds to the 'started_at_bitcoin_block_hash' column (BYTEA).
    #[prost(message, optional, tag = "9")]
    pub started_at_bitcoin_block_hash: ::core::option::Option<
        super::super::super::super::bitcoin::BitcoinBlockHash,
    >,
    /// The height of the Bitcoin block that initiated this DKG round.
    /// Corresponds to the 'started_at_bitcoin_block_height' column (BIGINT).
    #[prost(uint64, tag = "10")]
    pub started_at_bitcoin_block_height: u64,
}
/// Represents the header of a backup file.
/// This header contains metadata about the backup file, including
/// the version of the backup file format, the timestamp of when it was created,
/// the software version that created it, the public key of the signer, and
/// the signature over the backup file body.
/// The header is used to verify the integrity and authenticity of the backup file.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BackupFileHeader {
    /// Version of the backup file format structure. Start with 1.
    #[prost(uint32, tag = "1")]
    pub format_version: u32,
    /// Timestamp indicating when the backup file was created,
    /// represented as seconds since the Unix epoch (UTC).
    #[prost(uint64, tag = "2")]
    pub unix_timestamp: u64,
    /// Version string of the signer software that created this backup, as
    /// reported by the signer's `GIT_COMMIT` constant.
    #[prost(string, tag = "3")]
    pub software_revision: ::prost::alloc::string::String,
    /// Public key of the signer who created this backup file.
    /// This key is used to verify the integrity and authenticity of the backup.
    #[prost(message, optional, tag = "4")]
    pub public_key: ::core::option::Option<
        super::super::super::super::crypto::PublicKey,
    >,
    /// Signature over the serialized bytes of the `BackupFileBody` message.
    /// This signature is generated using the private key corresponding to
    /// the `public_key` field. It ensures that the backup file has not been
    /// tampered with and is indeed created by the signer identified by
    /// the `public_key`.
    #[prost(message, optional, tag = "5")]
    pub signature: ::core::option::Option<
        super::super::super::super::crypto::EcdsaSignature,
    >,
}
/// Contains the actual data payload being backed up.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BackupFileBody {
    /// DKG shares data.
    ///
    /// Start tags from 1 within this message
    #[prost(message, repeated, tag = "1")]
    pub dkg_shares: ::prost::alloc::vec::Vec<DkgShares>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BackupFile {
    /// The header of the backup file, containing metadata about the backup.
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<BackupFileHeader>,
    /// The main body containing the actual backed-up data.
    /// The signature in the header should cover the serialized bytes of this body.
    #[prost(message, optional, tag = "2")]
    pub body: ::core::option::Option<BackupFileBody>,
}
/// Represents the verification status of DKG shares.
/// Maps to the sbtc_signer.dkg_shares_status ENUM type.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DkgSharesStatus {
    /// Default value, should not be used explicitly if possible.
    Unspecified = 0,
    Unverified = 1,
    Verified = 2,
    Failed = 3,
}
impl DkgSharesStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "DKG_SHARES_STATUS_UNSPECIFIED",
            Self::Unverified => "DKG_SHARES_STATUS_UNVERIFIED",
            Self::Verified => "DKG_SHARES_STATUS_VERIFIED",
            Self::Failed => "DKG_SHARES_STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DKG_SHARES_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "DKG_SHARES_STATUS_UNVERIFIED" => Some(Self::Unverified),
            "DKG_SHARES_STATUS_VERIFIED" => Some(Self::Verified),
            "DKG_SHARES_STATUS_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}

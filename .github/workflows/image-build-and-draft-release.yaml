## Github workflow to build a multiarch docker image from pre-built binaries

name: GHCR Release Image (Binary)

on:
  repository_dispatch:
    types: [image_build_and_draft_release]

permissions:
  id-token: write
  contents: write
  attestations: write
  packages: write

## Define which docker arch to build for
env:
  docker_platforms: "linux/amd64"
  latest_release: $(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)

concurrency:
  group: docker-image-${{ github.head_ref || github.ref || github.run_id }}
  ## Always cancel duplicate jobs
  cancel-in-progress: true

run-name: "Build and Release sBTC Signer ${{ github.event.client_payload.tag_name }} Docker Image"

jobs:
  image:
    name: Build Image
    strategy:
      fail-fast: false
      ## Build a maximum of 2 images for if / when this is extended
      ## for more distribution types.
      max-parallel: 2
      matrix:
        dist:
          - debian
        docker_target:
          - signer
          - blocklist-client
    outputs:
      signer: ${{ steps.save_digest.outputs.signer }}
      blocklist-client: ${{ steps.save_digest.outputs.blocklist-client }}
    runs-on: ubuntu-latest
    environment: "Push to Docker"
    steps:
      - name: Log in to GHCR
        id: ghcr_login
        uses: stacks-sbtc/actions/docker/login-action@181f8c67da2707c66b5e31f24e7418c47adefdd1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      ## Checkout the branch of the release provided.
      ## This requires that a release branch exists for the tag.
      - name: Checkout Repository
        id: checkout_repository
        uses: stacks-sbtc/actions/checkout@181f8c67da2707c66b5e31f24e7418c47adefdd1
        with:
          ref: refs/tags/${{ github.event.client_payload.tag_name }}

      ## if the repo owner is not `stacks-network`, default to a docker-org of the repo owner (i.e. github user id)
      ## this allows forks to run the docker push workflows without having to hardcode a dockerhub org (but it does require docker hub user to match github username)
      - name: Set Local env vars
        id: set_env
        if: |
          github.repository_owner != 'stacks-network'
        run: |
          echo "ghcr_org=ghcr.io/${{ github.repository_owner }}" >> "$GITHUB_ENV"

      ## Set docker metatdata
      ## - depending on the matrix.dist, different tags will be enabled
      ## ex. debian will have this tag: `type=ref,event=tag,enable=${{ matrix.dist == 'debian' }}`
      - name: Docker Metadata ( ${{ matrix.dist }} )
        id: docker_metadata
        uses: stacks-sbtc/actions/docker/metadata-action@181f8c67da2707c66b5e31f24e7418c47adefdd1
        with:
          images: |
            ${{ env.ghcr_org }}/sbtc
          tags: |
            type=raw,value=${{ matrix.docker_target }}-${{ github.event.client_payload.tag_name }}-${{ matrix.dist }}
            type=raw,value=${{ matrix.docker_target }}-${{ github.event.client_payload.tag_name }},enable=${{ matrix.dist == 'debian' }}
            type=raw,value=${{ matrix.docker_target }}-latest,enable=${{ env.latest_release == github.event.client_payload.tag_name && matrix.dist == 'debian' }}
            type=raw,value=${{ matrix.docker_target }}-latest-${{ matrix.dist }},enable=${{ env.latest_release == github.event.client_payload.tag_name }}

      ## Build docker image for release
      - name: Build and Push ( ${{ matrix.dist }} ${{ matrix.docker_target }} )
        id: docker_build
        uses: stacks-sbtc/actions/docker/build-push-action@942832cc7f86ead03c05b7035cd4b9573dd6c617
        with:
          file: ./.github/actions/dockerfiles/Dockerfile.${{ matrix.docker_target }}.${{ matrix.dist }}
          platforms: ${{ env.docker_platforms }}
          tags: ${{ steps.docker_metadata.outputs.tags }}
          labels: ${{ steps.docker_metadata.outputs.labels }}
          target: ${{ matrix.docker_target }}
          push: true
          build-args: |
            GIT_COMMIT=${{ github.event.client_payload.tag_name }}

      - name: Save digest as output
        id: save_digest
        run: echo "${{ matrix.docker_target }}=${{ steps.docker_build.outputs.digest }}" >> "$GITHUB_OUTPUT"

      - name: Generate artifact attestation
        id: generate_attestation
        uses: stacks-sbtc/actions/attest-build-provenance@181f8c67da2707c66b5e31f24e7418c47adefdd1
        with:
          subject-name: ${{ env.ghcr_org }}/sbtc
          subject-digest: ${{ steps.docker_build.outputs.digest }}

      - name: Download artifact attestation
        id: download_attestation
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh attestation download oci://${{ env.ghcr_org }}/sbtc:${{ matrix.docker_target }}-${{ github.event.client_payload.tag_name }}-${{ matrix.dist }} -R ${{ github.repository_owner }}/sbtc
          
          # Rename the attestation bundle (replace ":" with "_")
          ATTESTATION_FILE="$(echo "${{ steps.docker_build.outputs.digest }}.jsonl" | tr ':' '_')"
          mv "${{ steps.docker_build.outputs.digest }}.jsonl" "$ATTESTATION_FILE"
          echo "ATTESTATION_FILE=$ATTESTATION_FILE" >> $GITHUB_ENV
          
          # Generate trusted root
          gh attestation trusted-root > trusted_root.jsonl

      - name: Upload Attestation Files as Artifacts
        id: upload_attestation
        uses: stacks-sbtc/actions/upload-artifact@181f8c67da2707c66b5e31f24e7418c47adefdd1
        with:
          name: attestation-files
          overwrite: true
          path: |
            ${{ env.ATTESTATION_FILE }}
            trusted_root.jsonl

  release:
    name: Draft Release
    runs-on: ubuntu-latest
    needs: image
    steps:
      - name: Set TAG_NAME
        id: set_env
        run: echo "TAG_NAME=${{ github.event.client_payload.tag_name }}" >> "$GITHUB_ENV"

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          cat <<EOF > release_notes.md
          <A manual one-liner with changes>Fill the section.

          [Highlights](#highlights) • [Images](#images) • [Upgrade Instructions](#upgrade-instructions)

          ## ✨ Highlights <a id="highlights">

          __✏️ Complete the highlights section with a brief list of notable changes__
          - Highlight 1
          - Highlight 2
          - etc...

          ## 🐳 Images: <a id="images">
          ⚠️ Always use [immutable image tags](https://docs.docker.com/reference/cli/docker/image/pull/#pull-an-image-by-digest-immutable-identifier) - the image digests are provided below. Verify the attestation of these images using this [guide](https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds#verifying-artifact-attestations-with-the-github-cli).

          We publish our images on [GitHub Container Registry](https://github.com/${{ github.repository_owner }}/sbtc/pkgs/container/sbtc).

          ### sBTC Signer
          [\`ghcr.io/${{ github.repository_owner }}/sbtc:signer-${{ env.TAG_NAME }}@${{ needs.image.outputs.signer }}\`](https://github.com/${{ github.repository }}/pkgs/container/sbtc/signer-${{ env.TAG_NAME }})
          - 🏷️ \`${{ github.repository_owner }}/sbtc:signer-${{ env.TAG_NAME }}\`
          - 🔒 \`${{ needs.image.outputs.signer }}\`

          ### Blocklist Client
          [\`ghcr.io/${{ github.repository_owner }}/sbtc:blocklist-client-${{ env.TAG_NAME }}@${{ needs.image.outputs.blocklist-client }}\`](https://github.com/${{ github.repository }}/pkgs/container/sbtc/blocklist-client-${{ env.TAG_NAME }})
          - 🏷️ \`${{ github.repository_owner }}/sbtc:blocklist-client-${{ env.TAG_NAME }}\`
          - 🔒 \`${{ needs.image.outputs.blocklist-client }}\`

          ## 📙 Database migrations

          Database migrations may be found at [\`signer/migrations\`](https://github.com/stacks-network/sbtc/tree/${{ env.TAG_NAME }}/signer/migrations).

          **Important:** If you run your signer using the \`--migrate-db\` flag (which is the default when using the official docker images), the database will be automatically migrated to the latest version. If you do not use this flag, you must manually apply the migrations.

          ## 🛠️ Upgrade Instructions: <a id="upgrade-instructions">

          1. Stop your sBTC signer
          2. Backup your database
          3. Edit your configuration as instructed
          4. Apply database migrations (only if not running with the \`--migrate-db\` flag)
          5. Update your sBTC images as specified above
          6. Restart your sBTC signer and blocklist client

          ## 📝 What's Changed <a id="whats-changed">
          ### Protocol Breaking Changes 🚨
          __✏️ Move the protocol breaking changes (if any) here, otherwise delete this section.__

          ### Local Breaking Changes ⚠️
          __✏️ Move the local breaking changes (if any) here, otherwise delete this section.__

          ### Other Changes
          <details>
          <summary>Click to expand</summary>

          __✏️ Move the remaining changelog here.__
          </details>

          ## 👏 New Contributors
          __✏️ Move the list of new contributors (if any) here, otherwise delete this section.__

          __✏️ Move the "Full Changelog" link here.__
          EOF

      - name: Create GitHub Release
        id: create_release
        uses: stacks-sbtc/actions/github-script@181f8c67da2707c66b5e31f24e7418c47adefdd1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ env.TAG_NAME }}',
              name: '${{ env.TAG_NAME }}',
              body: releaseNotes,
              draft: true,
              generate_release_notes: true
            });

            console.log(`Created release: ${release.data.html_url}`);
